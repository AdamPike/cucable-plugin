package com.trivago.rta.runners;

import com.trivago.rta.files.FileIO;
import com.trivago.rta.vo.SingleScenarioRunner;
import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RunnerFileContentRendererTest {
    private FileIO fileIO;
    private RunnerFileContentRenderer runnerFileContentRenderer;

    @Before
    public void setup() {
        fileIO = mock(FileIO.class);
        runnerFileContentRenderer = new RunnerFileContentRenderer(fileIO);
    }

    @Test
    public void getRenderedFeatureFileContentTest() throws Exception {

        String template = "package parallel;\n" +
                "\n" +
                "import cucumber.api.CucumberOptions;\n" +
                "\n" +
                "@CucumberOptions(\n" +
                "    monochrome = false,\n" +
                "    features = {\"classpath:parallel/features/[FEATURE_FILE_NAME].feature\"},\n" +
                "    format = {\"json:target/cucumber-report/[FEATURE_FILE_NAME].json\"}\n" +
                ")\n" +
                "public class [FEATURE_FILE_NAME] {\n" +
                "}\n";

        when(fileIO.readContentFromFile(anyString())).thenReturn(template);

        String expectedOutput = "package parallel;\n" +
                "\n" +
                "import cucumber.api.CucumberOptions;\n" +
                "\n" +
                "@CucumberOptions(\n" +
                "    monochrome = false,\n" +
                "    features = {\"classpath:parallel/features/featureFileName.feature\"},\n" +
                "    format = {\"json:target/cucumber-report/featureFileName.json\"}\n" +
                ")\n" +
                "public class featureFileName {\n" +
                "}\n" +
                "\n" +
                "// Generated by Cucable\n";

        SingleScenarioRunner singleScenarioRunner = new SingleScenarioRunner(
                "pathToTemplate",
                "featureFileName"
        );
        String renderedRunnerFileContent = runnerFileContentRenderer.getRenderedRunnerFileContent(singleScenarioRunner);

        assertThat(renderedRunnerFileContent, is(expectedOutput));
    }
}
