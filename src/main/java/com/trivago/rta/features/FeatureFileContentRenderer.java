/*
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.trivago.rta.features;

import com.trivago.rta.vo.DataTable;
import com.trivago.rta.vo.SingleScenario;
import com.trivago.rta.vo.Step;

import java.util.List;

public class FeatureFileContentRenderer {

    private static final String LINE_SEPARATOR = System.lineSeparator();

    /**
     * Get the complete content that can be written to a valid feature file.
     *
     * @return the feature file content.
     */
    String getRenderedFeatureFileContent(SingleScenario singleScenario) {
        StringBuilder renderedContent = new StringBuilder();

        addTags(renderedContent, singleScenario.getFeatureTags());
        addFeatureNameAndDescription(
                renderedContent, singleScenario.getFeatureName(), singleScenario.getFeatureDescription()
        );

        addTags(renderedContent, singleScenario.getScenarioTags());
        addScenarioNameAndDescription(
                renderedContent, singleScenario.getScenarioName(), singleScenario.getScenarioDescription());

        addSteps(renderedContent, singleScenario.getBackgroundSteps());
        addSteps(renderedContent, singleScenario.getSteps());

        addGeneratedByCucumberMessage(renderedContent);

        return renderedContent.toString();
    }

    /**
     * Adds the "Generated by Cucable" line to the generated feature file content.
     *
     * @param stringBuilder The current feature {@link StringBuilder} instance.
     */
    private void addGeneratedByCucumberMessage(final StringBuilder stringBuilder) {
        stringBuilder.append(LINE_SEPARATOR)
                .append("# Generated by Cucable")
                .append(LINE_SEPARATOR);
    }

    /**
     * Adds the rendered steps to the generated feature file content.
     *
     * @param stringBuilder The current feature {@link StringBuilder} instance.
     * @param steps         The {@link Step} list.
     */
    private void addSteps(final StringBuilder stringBuilder, final List<Step> steps) {
        if (steps == null) {
            return;
        }
        for (Step step : steps) {
            stringBuilder.append(step.getName()).append(LINE_SEPARATOR);
            stringBuilder.append(formatDataTableString(step.getDataTable()));
        }
    }

    /**
     * Adds the scenario name to the generated feature file content.
     *
     * @param stringBuilder       The current feature {@link StringBuilder} instance.
     * @param scenarioName        The scenario name.
     * @param scenarioDescription The scenario description.
     */
    private void addScenarioNameAndDescription(
            final StringBuilder stringBuilder,
            final String scenarioName,
            final String scenarioDescription
    ) {
        stringBuilder.append("Scenario: ").append(scenarioName);
        if (scenarioDescription != null && !scenarioDescription.isEmpty()) {
            stringBuilder.append(LINE_SEPARATOR).append(scenarioDescription);
        }
        stringBuilder.append(LINE_SEPARATOR).append(LINE_SEPARATOR);
    }

    /**
     * Adds the feature name to the generated feature file content.
     *
     * @param stringBuilder      The current feature {@link StringBuilder} instance.
     * @param featureName        The feature name.
     * @param featureDescription The feature description.
     */
    private void addFeatureNameAndDescription(
            final StringBuilder stringBuilder,
            final String featureName,
            final String featureDescription
    ) {
        stringBuilder
                .append("Feature: ").append(featureName);
        if (featureDescription != null && !featureDescription.isEmpty()) {
            stringBuilder.append(LINE_SEPARATOR).append(featureDescription);
        }
        stringBuilder.append(LINE_SEPARATOR).append(LINE_SEPARATOR);

    }

    /**
     * Adds the tags to the generated feature file content.
     *
     * @param stringBuilder The current feature {@link StringBuilder} instance.
     * @param tags          The list of {@link String} tags.
     */
    private void addTags(final StringBuilder stringBuilder, final List<String> tags) {
        if (tags == null) {
            return;
        }
        for (String tag : tags) {
            stringBuilder.append(tag).append(LINE_SEPARATOR);
        }
    }

    /**
     * Turns a {@link DataTable} instance into a printable string.
     *
     * @param dataTable the {@link DataTable} instance.
     * @return the processed data table {@link String}.
     */
    private String formatDataTableString(final DataTable dataTable) {
        if (dataTable == null) {
            return "";
        }
        char dataTableSeparator = '|';
        StringBuilder dataTableStringBuilder = new StringBuilder();
        for (List<String> rowValues : dataTable.getRows()) {
            dataTableStringBuilder.append(dataTableSeparator);
            for (String rowValue : rowValues) {
                dataTableStringBuilder.append(rowValue).append(dataTableSeparator);
            }
            dataTableStringBuilder.append(LINE_SEPARATOR);
        }
        return dataTableStringBuilder.toString();
    }
}
