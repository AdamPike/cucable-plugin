/*
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.trivago.rta.runners;

import com.trivago.rta.exceptions.filesystem.MissingFileException;
import com.trivago.rta.files.FileIO;
import com.trivago.rta.vo.FeatureRunner;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.nio.file.Paths;
import java.util.List;

@Singleton
public class RunnerFileContentRenderer {
    private final FileIO fileIO;

    @Inject
    public RunnerFileContentRenderer(FileIO fileIO) {
        this.fileIO = fileIO;
    }

    /**
     * Returns the full content for the concrete runner file.
     *
     * @param featureRunner The instance of the {@link FeatureRunner}.
     * @return The file content for the runner file.
     * @throws MissingFileException Thrown if the runner file is missing.
     */
    public String getRenderedRunnerFileContent(
            FeatureRunner featureRunner
    ) throws MissingFileException {

        String runnerTemplatePath = featureRunner.getRunnerTemplatePath();
        String runnerClassName = featureRunner.getRunnerClassName();
        String fileString = fileIO.readContentFromFile(runnerTemplatePath);

        if (runnerTemplatePath.endsWith(".java")) {
            fileString = replaceJavaTemplatePlaceholders(runnerTemplatePath, runnerClassName, fileString);
        }

        fileString = replaceFeatureFilePlaceholder(fileString, featureRunner.getFeatureFileNames());
        fileString = fileString.replace("[CUCABLE:RUNNER]", runnerClassName);
        fileString = addCucableInfo(fileString, runnerTemplatePath);
        return fileString;
    }

    /**
     * Replace the feature placeholder in the template by the generated feature file names.
     *
     * @param runnerFileContentString The source string.
     * @param featureFileNames        The lost of feature file names.
     * @return The new string with the replaced feature placeholder.
     */
    private String replaceFeatureFilePlaceholder(final String runnerFileContentString, final List<String> featureFileNames) {
        String replacedContent = runnerFileContentString.replace("[CUCABLE:FEATURE]", featureFileNames.get(0));
        return replacedContent;
    }

    /**
     * Adds the source scenario comments to the runner file content string.
     *
     * @param runnerFileContentString The source string.
     * @param runnerTemplatePath      The path to the runner template file.
     * @return The new string with the scenario information attached.
     */
    private String addCucableInfo(
            final String runnerFileContentString,
            final String runnerTemplatePath
    ) {
        return runnerFileContentString
                .concat(System.lineSeparator())
                .concat(System.lineSeparator())
                .concat("// Generated by Cucable from ")
                .concat(runnerTemplatePath.replace("\\", "/"))
                .concat(System.lineSeparator());
    }

    /**
     * Perform additional substitutions when the provided template is a java class file.
     *
     * @param runnerTemplatePath The path to the runner java template.
     * @param runnerClassName    The name of the runner file class.
     * @param fileString         The file content string of the rendered runner file.
     * @return The file content for the runner file with replaced package and java class name.
     */
    private String replaceJavaTemplatePlaceholders(
            final String runnerTemplatePath,
            final String runnerClassName,
            final String fileString
    ) {
        String javaFileName = Paths.get(runnerTemplatePath).getFileName().toString();
        String javaFileNameWithoutExtension = javaFileName.substring(0, javaFileName.lastIndexOf('.'));
        String replacedFileString = fileString.replace(javaFileNameWithoutExtension, runnerClassName);
        replacedFileString = replacedFileString.replaceAll("package .*;", "");
        return replacedFileString;
    }
}
